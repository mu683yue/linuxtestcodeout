// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policyToDBProvider.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "policyToDBProvider.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace policymsgpolicytodbprovider {
class MsgFromPolicyToDBProviderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgFromPolicyToDBProvider> {
} _MsgFromPolicyToDBProvider_default_instance_;

namespace protobuf_policyToDBProvider_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, network_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, traffic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, device_activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFromPolicyToDBProvider, enterprise_id_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(MsgFromPolicyToDBProvider)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgFromPolicyToDBProvider_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "policyToDBProvider.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _MsgFromPolicyToDBProvider_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MsgFromPolicyToDBProvider_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\030policyToDBProvider.proto\022\033policymsgpol"
      "icytodbprovider\"\364\001\n\031MsgFromPolicyToDBPro"
      "vider\022\017\n\007user_id\030\n \001(\004\022\021\n\tdevice_id\030\024 \001("
      "\004\022\022\n\nproduct_id\030\036 \001(\004\022\020\n\010event_id\030( \001(\004\022"
      "\022\n\nnetwork_id\0302 \001(\004\022\016\n\006map_id\030< \001(\004\022\016\n\006m"
      "sg_id\030F \001(\r\022\022\n\nsession_id\030P \001(\t\022\022\n\ntraff"
      "ic_id\030Z \001(\t\022\032\n\022device_activity_id\030d \001(\004\022"
      "\025\n\renterprise_id\030n \001(\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "policyToDBProvider.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_policyToDBProvider_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgFromPolicyToDBProvider::kUserIdFieldNumber;
const int MsgFromPolicyToDBProvider::kDeviceIdFieldNumber;
const int MsgFromPolicyToDBProvider::kProductIdFieldNumber;
const int MsgFromPolicyToDBProvider::kEventIdFieldNumber;
const int MsgFromPolicyToDBProvider::kNetworkIdFieldNumber;
const int MsgFromPolicyToDBProvider::kMapIdFieldNumber;
const int MsgFromPolicyToDBProvider::kMsgIdFieldNumber;
const int MsgFromPolicyToDBProvider::kSessionIdFieldNumber;
const int MsgFromPolicyToDBProvider::kTrafficIdFieldNumber;
const int MsgFromPolicyToDBProvider::kDeviceActivityIdFieldNumber;
const int MsgFromPolicyToDBProvider::kEnterpriseIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgFromPolicyToDBProvider::MsgFromPolicyToDBProvider()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_policyToDBProvider_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
}
MsgFromPolicyToDBProvider::MsgFromPolicyToDBProvider(const MsgFromPolicyToDBProvider& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traffic_id().size() > 0) {
    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&enterprise_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(enterprise_id_));
  // @@protoc_insertion_point(copy_constructor:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
}

void MsgFromPolicyToDBProvider::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&enterprise_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(enterprise_id_));
  _cached_size_ = 0;
}

MsgFromPolicyToDBProvider::~MsgFromPolicyToDBProvider() {
  // @@protoc_insertion_point(destructor:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  SharedDtor();
}

void MsgFromPolicyToDBProvider::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgFromPolicyToDBProvider::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFromPolicyToDBProvider::descriptor() {
  protobuf_policyToDBProvider_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_policyToDBProvider_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgFromPolicyToDBProvider& MsgFromPolicyToDBProvider::default_instance() {
  protobuf_policyToDBProvider_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgFromPolicyToDBProvider* MsgFromPolicyToDBProvider::New(::google::protobuf::Arena* arena) const {
  MsgFromPolicyToDBProvider* n = new MsgFromPolicyToDBProvider;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgFromPolicyToDBProvider::Clear() {
// @@protoc_insertion_point(message_clear_start:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&enterprise_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(enterprise_id_));
}

bool MsgFromPolicyToDBProvider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 user_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 product_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 event_id = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 network_id = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(400u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &network_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 map_id = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(480u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(560u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(642u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traffic_id = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(722u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traffic_id().data(), this->traffic_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_activity_id = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 enterprise_id = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(880u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enterprise_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  return false;
#undef DO_
}

void MsgFromPolicyToDBProvider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 10;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->user_id(), output);
  }

  // uint64 device_id = 20;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->device_id(), output);
  }

  // uint64 product_id = 30;
  if (this->product_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->product_id(), output);
  }

  // uint64 event_id = 40;
  if (this->event_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->event_id(), output);
  }

  // uint64 network_id = 50;
  if (this->network_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->network_id(), output);
  }

  // uint64 map_id = 60;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->map_id(), output);
  }

  // uint32 msg_id = 70;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->msg_id(), output);
  }

  // string session_id = 80;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->session_id(), output);
  }

  // string traffic_id = 90;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), this->traffic_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      90, this->traffic_id(), output);
  }

  // uint64 device_activity_id = 100;
  if (this->device_activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(100, this->device_activity_id(), output);
  }

  // uint64 enterprise_id = 110;
  if (this->enterprise_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(110, this->enterprise_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
}

::google::protobuf::uint8* MsgFromPolicyToDBProvider::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 10;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->user_id(), target);
  }

  // uint64 device_id = 20;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->device_id(), target);
  }

  // uint64 product_id = 30;
  if (this->product_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->product_id(), target);
  }

  // uint64 event_id = 40;
  if (this->event_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->event_id(), target);
  }

  // uint64 network_id = 50;
  if (this->network_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->network_id(), target);
  }

  // uint64 map_id = 60;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->map_id(), target);
  }

  // uint32 msg_id = 70;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->msg_id(), target);
  }

  // string session_id = 80;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->session_id(), target);
  }

  // string traffic_id = 90;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), this->traffic_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        90, this->traffic_id(), target);
  }

  // uint64 device_activity_id = 100;
  if (this->device_activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(100, this->device_activity_id(), target);
  }

  // uint64 enterprise_id = 110;
  if (this->enterprise_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(110, this->enterprise_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  return target;
}

size_t MsgFromPolicyToDBProvider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  size_t total_size = 0;

  // string session_id = 80;
  if (this->session_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string traffic_id = 90;
  if (this->traffic_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traffic_id());
  }

  // uint64 user_id = 10;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // uint32 msg_id = 70;
  if (this->msg_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // uint64 device_id = 20;
  if (this->device_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // uint64 product_id = 30;
  if (this->product_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->product_id());
  }

  // uint64 event_id = 40;
  if (this->event_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->event_id());
  }

  // uint64 network_id = 50;
  if (this->network_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->network_id());
  }

  // uint64 map_id = 60;
  if (this->map_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->map_id());
  }

  // uint64 device_activity_id = 100;
  if (this->device_activity_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_activity_id());
  }

  // uint64 enterprise_id = 110;
  if (this->enterprise_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->enterprise_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFromPolicyToDBProvider::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgFromPolicyToDBProvider* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgFromPolicyToDBProvider>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
    MergeFrom(*source);
  }
}

void MsgFromPolicyToDBProvider::MergeFrom(const MsgFromPolicyToDBProvider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.traffic_id().size() > 0) {

    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.product_id() != 0) {
    set_product_id(from.product_id());
  }
  if (from.event_id() != 0) {
    set_event_id(from.event_id());
  }
  if (from.network_id() != 0) {
    set_network_id(from.network_id());
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
  if (from.device_activity_id() != 0) {
    set_device_activity_id(from.device_activity_id());
  }
  if (from.enterprise_id() != 0) {
    set_enterprise_id(from.enterprise_id());
  }
}

void MsgFromPolicyToDBProvider::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFromPolicyToDBProvider::CopyFrom(const MsgFromPolicyToDBProvider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFromPolicyToDBProvider::IsInitialized() const {
  return true;
}

void MsgFromPolicyToDBProvider::Swap(MsgFromPolicyToDBProvider* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgFromPolicyToDBProvider::InternalSwap(MsgFromPolicyToDBProvider* other) {
  session_id_.Swap(&other->session_id_);
  traffic_id_.Swap(&other->traffic_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(device_id_, other->device_id_);
  std::swap(product_id_, other->product_id_);
  std::swap(event_id_, other->event_id_);
  std::swap(network_id_, other->network_id_);
  std::swap(map_id_, other->map_id_);
  std::swap(device_activity_id_, other->device_activity_id_);
  std::swap(enterprise_id_, other->enterprise_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgFromPolicyToDBProvider::GetMetadata() const {
  protobuf_policyToDBProvider_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_policyToDBProvider_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgFromPolicyToDBProvider

// uint64 user_id = 10;
void MsgFromPolicyToDBProvider::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MsgFromPolicyToDBProvider::user_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.user_id)
  return user_id_;
}
void MsgFromPolicyToDBProvider::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.user_id)
}

// uint64 device_id = 20;
void MsgFromPolicyToDBProvider::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MsgFromPolicyToDBProvider::device_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_id)
  return device_id_;
}
void MsgFromPolicyToDBProvider::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_id)
}

// uint64 product_id = 30;
void MsgFromPolicyToDBProvider::clear_product_id() {
  product_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MsgFromPolicyToDBProvider::product_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.product_id)
  return product_id_;
}
void MsgFromPolicyToDBProvider::set_product_id(::google::protobuf::uint64 value) {
  
  product_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.product_id)
}

// uint64 event_id = 40;
void MsgFromPolicyToDBProvider::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MsgFromPolicyToDBProvider::event_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.event_id)
  return event_id_;
}
void MsgFromPolicyToDBProvider::set_event_id(::google::protobuf::uint64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.event_id)
}

// uint64 network_id = 50;
void MsgFromPolicyToDBProvider::clear_network_id() {
  network_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MsgFromPolicyToDBProvider::network_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.network_id)
  return network_id_;
}
void MsgFromPolicyToDBProvider::set_network_id(::google::protobuf::uint64 value) {
  
  network_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.network_id)
}

// uint64 map_id = 60;
void MsgFromPolicyToDBProvider::clear_map_id() {
  map_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MsgFromPolicyToDBProvider::map_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.map_id)
  return map_id_;
}
void MsgFromPolicyToDBProvider::set_map_id(::google::protobuf::uint64 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.map_id)
}

// uint32 msg_id = 70;
void MsgFromPolicyToDBProvider::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 MsgFromPolicyToDBProvider::msg_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.msg_id)
  return msg_id_;
}
void MsgFromPolicyToDBProvider::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.msg_id)
}

// string session_id = 80;
void MsgFromPolicyToDBProvider::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgFromPolicyToDBProvider::session_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
  return session_id_.GetNoArena();
}
void MsgFromPolicyToDBProvider::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}
#if LANG_CXX11
void MsgFromPolicyToDBProvider::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}
#endif
void MsgFromPolicyToDBProvider::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}
void MsgFromPolicyToDBProvider::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}
::std::string* MsgFromPolicyToDBProvider::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgFromPolicyToDBProvider::release_session_id() {
  // @@protoc_insertion_point(field_release:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgFromPolicyToDBProvider::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}

// string traffic_id = 90;
void MsgFromPolicyToDBProvider::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgFromPolicyToDBProvider::traffic_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
  return traffic_id_.GetNoArena();
}
void MsgFromPolicyToDBProvider::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}
#if LANG_CXX11
void MsgFromPolicyToDBProvider::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}
#endif
void MsgFromPolicyToDBProvider::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}
void MsgFromPolicyToDBProvider::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}
::std::string* MsgFromPolicyToDBProvider::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgFromPolicyToDBProvider::release_traffic_id() {
  // @@protoc_insertion_point(field_release:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgFromPolicyToDBProvider::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}

// uint64 device_activity_id = 100;
void MsgFromPolicyToDBProvider::clear_device_activity_id() {
  device_activity_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MsgFromPolicyToDBProvider::device_activity_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_activity_id)
  return device_activity_id_;
}
void MsgFromPolicyToDBProvider::set_device_activity_id(::google::protobuf::uint64 value) {
  
  device_activity_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_activity_id)
}

// uint64 enterprise_id = 110;
void MsgFromPolicyToDBProvider::clear_enterprise_id() {
  enterprise_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MsgFromPolicyToDBProvider::enterprise_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.enterprise_id)
  return enterprise_id_;
}
void MsgFromPolicyToDBProvider::set_enterprise_id(::google::protobuf::uint64 value) {
  
  enterprise_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.enterprise_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace policymsgpolicytodbprovider

// @@protoc_insertion_point(global_scope)
